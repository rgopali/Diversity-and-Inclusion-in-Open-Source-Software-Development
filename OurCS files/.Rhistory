install.packages("pandoc")
install.packages('pandoc', dependencies=TRUE, repos='http://cran.rstudio.com/')
library(pandoc)
library(readr)
old_poke = read_delim("Downloads/poke-log.csv", ";", escape_double = FALSE, trim_ws = TRUE)
new_poke = read_delim("Downloads/david-poke-log.csv", ";", escape_double = FALSE, trim_ws = TRUE)
nrow(old_poke[old_poke$first_travis_at=='OK' & old_poke$last_build_id!='None',])
travis = old_poke[old_poke$first_travis_at=='OK' & old_poke$last_build_id!='None',]
nrow(travis)
rm(old_poke)
length(unique(travis$id))
new_travis = new_poke[new_poke$first_travis_at=='OK' & new_poke$last_build_id!='None',]
nrow(new_travis)
all_poked = rbind(travis, new_travis)
nrow(all_poked)
length(unique(all_poked$id))
all_poked = rbind(unique(travis), new_travis)
nrow(all_poked)
length(unique(all_poked$id))
head(all_poked)
library(sqldf)
all_poked = sqldf("select id, repo, travis_id, max(last_build_id) from all_poked group by id")
length(unique(all_poked$id))
head(all_poked)
names(all_poked)
names(all_poked) = c("id", "repo", "travis_id", "last_build_id")
head(all_poked)
survey = read_delim("Downloads/9to5/participantSummary.csv", ";", escape_double = FALSE, trim_ws = TRUE)
library(readr)
survey = read_delim("Downloads/9to5/participantSummary.csv", ";", escape_double = FALSE, trim_ws = TRUE)
head(survey)
survey = read_delim("Downloads/9to5/participantSummary.csv", ",", escape_double = FALSE, trim_ws = TRUE)
head(survey)
View(survey)
table(survey$company)
boxplot(list(paid=survey[survey$company==1,]$index95, others=survey[survey$company==0,]$index95))
cohen.d(survey[survey$company==1,]$index95, survey[survey$company==0,]$index95)
library(effsize)
cohen.d(survey[survey$company==1,]$index95, survey[survey$company==0,]$index95)
cliff.delta(survey[survey$company==1,]$index95, survey[survey$company==0,]$index95)
wilcox.test(survey[survey$company==1,]$index95, survey[survey$company==0,]$index95)
boxplot(list(paid=survey[survey$company==1,]$indexSupport,
others=survey[survey$company==0,]$indexSupport))
table(survey$changedJob)
table(survey$hadKid)
table(survey$lostInterest)
table(survey$joinedOrLeftSchool)
boxplot(list(paid=survey[survey$changedJob==1,]$indexSupport,
others=survey[survey$changedJob==0,]$indexSupport))
boxplot(list(changedJob=survey[survey$changedJob==1,]$indexSupport,
others=survey[survey$changedJob==0,]$indexSupport))
nrow(survey[survey$changedJob==1,])
nrow(survey[survey$changedJob==0,])
boxplot(list(changedJob=survey[survey$changedJob==1,]$index95,
others=survey[survey$changedJob==0,]$index95))
boxplot(list(changedJob=survey[survey$changedJob==1,]$indexSupport,
others=survey[survey$changedJob==0,]$indexSupport))
boxplot(list(changedJob=survey[survey$changedJob==1,]$index95,
others=survey[survey$changedJob==0,]$index95))
cor.test(survey$company, survey$changedJob)
table(company ~ changedJob, data=survey)
mytable = xtabs(~ company + changedJob, data=survey)
ftable(mytable) # print table
summary(mytable) # chi-square test of indepedence
library(MASS)
table(company ~ changedJob, data=survey)
summary(mytable) # chi-square test of indepedence
ftable(mytable) # print table
mytable = xtabs(~ index95 + changedJob, data=survey)
ftable(mytable) # print table
mytable = xtabs(~ company + changedJob, data=survey)
# mytable = xtabs(~ index95 + changedJob, data=survey)
ftable(mytable) # print table
summary(mytable) # chi-square test of indepedence
cor.test(survey$company, survey$changedJob, method = "spearman")
boxplot(list(lostInterest=survey[survey$lostInterest==1,]$indexSupport,
others=survey[survey$lostInterest==0,]$indexSupport))
boxplot(list(lostInterest=survey[survey$lostInterest==1,]$index95,
others=survey[survey$lostInterest==0,]$index95))
table(survey$changedJob)
table(survey$hadKid)
table(survey$lostInterest)
table(survey$joinedOrLeftSchool)
boxplot(list(joinedOrLeftSchool=survey[survey$joinedOrLeftSchool==1,]$indexSupport,
others=survey[survey$joinedOrLeftSchool==0,]$indexSupport))
boxplot(list(joinedOrLeftSchool=survey[survey$joinedOrLeftSchool==1,]$index95,
others=survey[survey$joinedOrLeftSchool==0,]$index95))
wilcox.test(joinedOrLeftSchool=survey[survey$joinedOrLeftSchool==1,]$index95,
others=survey[survey$joinedOrLeftSchool==0,]$index95)
wilcox.test(survey[survey$joinedOrLeftSchool==1,]$index95,
survey[survey$joinedOrLeftSchool==0,]$index95)
wilcox.test(survey[survey$lostInterest==1,]$index95,
survey[survey$lostInterest==0,]$index95)
wilcox.test(survey[survey$changedJob==1,]$index95,
survey[survey$changedJob==0,]$index95)
table(survey$changedJob)
boxplot(list(lostInterest=survey[survey$lostInterest==1,]$index95,
others=survey[survey$lostInterest==0,]$index95))
wilcox.test(survey[survey$lostInterest==1,]$index95,
survey[survey$lostInterest==0,]$index95)
boxplot(list(changedJob=survey[survey$changedJob==1,]$indexSupport,
others=survey[survey$changedJob==0,]$indexSupport))
library(readr)
survey = read_delim("Downloads/9to5/participantSummary.csv", ",", escape_double = FALSE, trim_ws = TRUE)
table(survey$company)
boxplot(list(paid=survey[survey$company==1,]$index95,
others=survey[survey$company==0,]$index95))
boxplot(list(paid=survey[survey$company==1,]$indexSupport,
others=survey[survey$company==0,]$indexSupport))
boxplot(list(changedJob=survey[survey$changedJob==1,]$index95,
others=survey[survey$changedJob==0,]$index95))
wilcox.test(survey[survey$changedJob==1,]$index95,
survey[survey$changedJob==0,]$index95)
table(survey$changedJob==1)
table(survey[survey$index95>=0.5,]$changedJob==1)
table(survey[survey$index95<=0.5,]$changedJob==1)
boxplot(list(lostInterest=survey[survey$lostInterest==1,]$index95,
others=survey[survey$lostInterest==0,]$index95))
boxplot(list(joinedOrLeftSchool=survey[survey$joinedOrLeftSchool==1,]$index95,
others=survey[survey$joinedOrLeftSchool==0,]$index95))
table(survey$joinedOrLeftSchool==1)
con = dbConnect(MySQL(),
user="adithya", password="zY1PzfI1uS9cz8Q",
dbname="lindholmen", host="localhost");
install.packages("DBI")
library(DBI)
con = dbConnect(MySQL(),
user="adithya", password="zY1PzfI1uS9cz8Q",
dbname="lindholmen", host="localhost");
library(RMySQL)
con = dbConnect(MySQL(),
user="adithya", password="zY1PzfI1uS9cz8Q",
dbname="lindholmen", host="localhost");
con = dbConnect(MySQL(),
user="adithya", password="zY1PzfI1uS9cz8Q",
dbname="lindholmen", host="127.0.0.1");
time_data = dbSendQuery(con, "select * from bug_commit_timeline");
nrow(time_data)
time_data_df = fetch(time_data, n=-1);
nrow(time_data_df)
desdoc_data = dbSendQuery(con, "select * from design_doc_timeline");
con = dbConnect(MySQL(),
user="adithya", password="zY1PzfI1uS9cz8Q",
dbname="lindholmen", host="127.0.0.1");
desdoc_data = dbSendQuery(con, "select * from design_doc_timeline");
desdoc_data_df = fetch(desdoc_data, n = -1);
library(car)
library(pscl)
source("prepare.R")
setwd("~/github/paper-Fork-basedDev/data")
library(car)
library(pscl)
source("prepare.R")
source("helpers.R")
library(texreg)
library(xtable)
library(ggplot2)
source("prepare.R")
pr_query = "select *
from fork.Pull_Request
WHERE isExternal = TRUE;"
pr_data <- sqlQuery(pr_query)
# ssh -L 3307:localhost:3306 bogdanv@feature.isri.cmu.edu
pr_query = "select *
from fork.Pull_Request
WHERE isExternal = TRUE;"
pr_data <- sqlQuery(pr_query)
pr_data = data.frame(pr_data)
nrow(pr_data)
names(pr_data)
length(unique(pr_data$projectID))
nc = pr_data[is.na(pr_data$num_commit),]
length(unique(nc$projectID))
tx = table(pr_data$projectID)
length(tx[tx>=100])
table(pr_data$new_merge_allType)/nrow(pr_data)
query <- "SELECT *
FROM Final f
INNER join Final_easiness_external fe on  f.repoID = fe.repoID
INNER join Final_PR fp on f.repoID = projectID
#INNER join Final_fork ff on f.repoID = ff.projectID
INNER join Final_contribution fc on f.repoID = fc.projectID
INNER join Final_modularity fm on f.repoID = fm.projectID
INNER join Final_Duplicate_PR fd on f.repoID = fd.projectID
INNER join Final_hardfork fh on f.repoID = fh.projectID"
final_data <- sqlQuery(query)
final_data = data.frame(final_data)
nrow(final_data)
names(final_data)
final_data$PRMergeRatio = final_data$ratio_PR_merged_external_noRobot
final_data$NumPRs = final_data$num_closed_PR_external
# final_data$PRMergeRatio = final_data$new_ratio_merged_PR_ofClosedPR
final_data$NumForks = log(final_data$num_forks)
final_data$Size = log(final_data$size)
final_data$ProjectAge = scale(final_data$repo_age)
final_data$MedianSubmitterExperience = log(final_data$median_submitPR_exprience+1)
final_data$RatioPRsWithTests = log(final_data$ratio_PR_withTest_external+1)
final_data$CentralizedMngmtIndex = final_data$central_mgmt_index_IssueEarly
final_data$ModularityIndex = (max(final_data$mod_external_50_filterFile) - final_data$mod_external_50_filterFile)/100
# final_data$ContributionEasinessIndex = final_data$easiness_mean_external
# final_data$AdditiveContributionIndex = final_data$easiness_filtered_mean_external
# final_data$AdditiveContributionIndex = final_data$easiness_mean_external
# final_data$AdditiveContributionIndex = final_data$easiness_merged_mean_external
final_data$AdditiveContributionIndex = final_data$easiness_filtered_merged_mean_external
final_data$num_rejected_PR = final_data$num_closed_PR - final_data$new_num_merged_allType
final_data$ratio_PR_reject_external = final_data$num_PR_reject_external/final_data$num_closed_PR_external
# final_data$ratio_PR_reject_external_dup = final_data$num_dupPR_both_reject_external/final_data$num_PR_reject_external
final_data[is.na(final_data$ratio_PR_reject_external),]$ratio_PR_reject_external = 0
# final_data[is.na(final_data$ratio_PR_reject_external_dup),]$ratio_PR_reject_external_dup = 0
## This changes the number of projects by a lot
summary(final_data$central_mgmt_index_IssueEarly)
final_data[is.na(final_data$central_mgmt_index_IssueEarly),]$central_mgmt_index_IssueEarly = 0
final_data[is.na(final_data$CentralizedMngmtIndex),]$CentralizedMngmtIndex = 0
nrow(subset(final_data,
# filter out some data
num_PR > 0
& !is.na(PRMergeRatio)
#            & !is.na(AdditiveContributionIndex)
#            & AdditiveContributionIndex < 0.6
#            & RatioPRsWithTests < 0.6
& num_issue > 0
# & easiness_filtered_mean_external <= 0.5
# & easiness_mean_external <= 0.6
#           & central_mgmt_index_IssueEarly <= 0.5
# & ratio_PR_wip_preCom_external < 0.8
# & ratio_PR_withTest_external < 0.6
# & ratio_reject_duplicate_pr <= 0.6 #0.35
& (num_closed_PR >= new_num_merged_allType)
#           & median_submitPR_exprience <= 30
#           & num_forks <= 30000
# & num_PR <= 20000
& !is.na(num_sampled_fork)
#& !is.na(num_hardFork_PR_nameChange_onlyF)
# & ratio_fork_levDistance_2 < 0.12
))
df = subset(final_data,
# filter out some data
num_PR > 0
& !is.na(PRMergeRatio)
& !is.na(AdditiveContributionIndex)
& AdditiveContributionIndex < 0.6
& RatioPRsWithTests < 0.6
& num_issue > 0
# & easiness_filtered_mean_external <= 0.5
# & easiness_mean_external <= 0.6
& central_mgmt_index_IssueEarly <= 0.5
# & ratio_PR_wip_preCom_external < 0.8
# & ratio_PR_withTest_external < 0.6
# & ratio_reject_duplicate_pr <= 0.6 #0.35
& (num_closed_PR >= new_num_merged_allType)
& median_submitPR_exprience <= 30
& num_forks <= 30000
# & num_PR <= 20000
& !is.na(num_sampled_fork)
#& !is.na(num_hardFork_PR_nameChange_onlyF)
# & ratio_fork_levDistance_2 < 0.12
)
nrow(df)
summary(df$num_hardFork_PR_nameChange_onlyF)
df[is.na(df$num_hardFork_PR_nameChange_onlyF),]$num_hardFork_PR_nameChange_onlyF = 0
summary(df$ratio_hardFork_PR_nameChange_onlyF)
df[is.na(df$ratio_hardFork_PR_nameChange_onlyF),]$ratio_hardFork_PR_nameChange_onlyF = 0
model5 = glm( (ratio_hardFork_PR_nameChange_onlyF>0) ~
NumForks
# + Size
# + ProjectAge
+ CentralizedMngmtIndex
# + ModularityIndex
# + scale(AdditiveContributionIndex)
+ PRMergeRatio
# log(easiness_filtered_mean_external+1),
,
# weights = num_sampled_fork,
data = df,
family = "binomial")
vif(model5)
pR2(model5)
summary(model5)
model5$coefficients
exp(model5$coefficients)
setwd("~/CMUGDrive/D&I in OSS - LMSBJD/OurCS/OurCS - Code and tables")
library(readr)
dream_table = read_csv("dream_table_final_merge.csv")
View(dream_table)
nrow(dream_table)
summary(dream_table$female_ratio)
hist(dream_table$female_ratio)
table(dream_table$female_ratio > 0)
hist(dream_table[dream_table$female_ratio > 0,]$female_ratio)
dream_table$has_female = dream_table$female_ratio > 0
table(dream_table$has_female)
# Check names of columns
names(dream_table)
# Sanity check: number of unique slugs should match number of rows
length(unique(dream_table$slug))
table(dream_table$has_female)
# Stars
summary(dream_table$stars)
hist(dream_table$stars)
hist(log(dream_table$stars+1))
# Compare stars between female vs no-female projects
boxplot(dream_table$stars)
hist(dream_table$stars)
# Compare stars between female vs no-female projects
boxplot(log(dream_table$stars+1))
boxplot(list(with_female = dream_table[dream_table$has_female == TRUE,]$stars,
without_female = dream_table[dream_table$has_female == FALSE,]$stars))
boxplot(list(with_female = log(dream_table[dream_table$has_female == TRUE,]$stars+1),
without_female = log(dream_table[dream_table$has_female == FALSE,]$stars+1) ))
dream_table$log_stars = log(dream_table$stars+1)
hist(log_stars)
dream_table$log_stars = log(dream_table$stars+1)
hist(log_stars)
hist(dream_table$log_stars)
# Compare stars between female vs no-female projects
boxplot(dream_table$log_stars)
boxplot(list(with_female = dream_table[dream_table$has_female == TRUE,]$log_stars,
without_female = dream_table[dream_table$has_female == FALSE,]$log_stars))
# Number of contributors
names(dream_table)
summary(dream_table$total_num_contributors)
hist(dream_table$total_num_contributors)
dream_table$log_num_contributors = log(dream_table$total_num_contributors)
hist(dream_table$log_num_contributors)
boxplot(list(with_female = dream_table[dream_table$has_female == TRUE,]$log_num_contributors,
without_female = dream_table[dream_table$has_female == FALSE,]$log_num_contributors))
dream_table$log_contributors = log(dream_table$total_num_contributors)
m1 = glm(has_female ~ log_stars,
family = "binomial",
data = dream_table)
summary(m1)
m2 = glm(has_female ~ log_stars + log_contributors,
family = "binomial",
data = dream_table)
summary(m2)
summary(dream_table$log_stars)
summary(dream_table$log_contributors)
names(dream_table)
table(dream_table$coc)
str(dream_table$coc)
dream_table$has_coc = dream_table$coc == 1
str(dream_table$coc)
table(dream_table$contrib)
str(dream_table$contrib)
dream_table$has_contrib = dream_table$contrib == 1
summary(dream_table$compound)
hist(dream_table$compound)
dream_table$sentiment = dream_table$compound
summary(dream_table$readability)
hist(dream_table$readability)
hist(dream_table$readMeLength)
hist(dream_table$readability / dream_table$readMeLength)
summary(dream_table$readability / dream_table$readMeLength)
dream_table_subset = subset(dream_table, readability / readMeLength > -600)
hist(dream_table_subset$readability / dream_table_subset$readMeLength)
dream_table$normalized_readability = dream_table$readability / dream_table$readMeLength
dream_table_subset = subset(dream_table, readability / readMeLength > -600)
hist(dream_table_subset$readability / dream_table_subset$readMeLength)
nrow(dream_table_subset)
names(dream_table)
hist(dream_table$header_count)
hist(dream_table$total_num_commits)
summary(dream_table$total_num_commits)
hist(log(dream_table$total_num_commits))
dream_table$log_commits = log(dream_table$total_num_commits)
dream_table_subset = subset(dream_table, readability / readMeLength > -600)
mn = glm(has_female ~
log_contributors
+ log_stars
+ has_coc
+ has_contrib
+ sentiment
+ header_count
+ normalized_readability
, family = "binomial"
, data = dream_table_subset)
library(car)
vif(mn)
summary(mn)
mn = glm(has_female ~
#log_contributors
+ log_stars
+ has_coc
+ has_contrib
+ sentiment
+ header_count
+ normalized_readability
, family = "binomial"
, data = dream_table_subset)
summary(mn)
mn = glm(has_female ~
log_contributors
+ log_stars
+ has_coc
+ has_contrib
+ sentiment
+ header_count
+ normalized_readability
, family = "binomial"
, data = dream_table_subset)
summary(mn)
mn = glm(has_female ~
log_contributors
+ log_stars
+ has_coc
# + has_contrib
# + sentiment
# + header_count
# + normalized_readability
, family = "binomial"
, data = dream_table_subset)
summary(mn)
names(dream_table)
mn = glm(female_ratio ~
log_contributors
+ log_stars
+ has_coc
+ has_contrib
+ sentiment
+ header_count
+ normalized_readability
, weights = total_num_contributors
, family = "binomial"
, data = dream_table_subset)
summary(mn)
anova(mn)
mn = lm(female_ratio ~
log_contributors
+ log_stars
+ has_coc
+ has_contrib
+ sentiment
+ header_count
+ normalized_readability
# , weights = total_num_contributors
# , family = "binomial"
, data = dream_table_subset)
vif(mn)
summary(mn)
mn = lm(has_female ~
log_contributors
+ log_stars
+ has_coc
+ has_contrib
+ sentiment
+ header_count
+ normalized_readability
# , weights = total_num_contributors
, family = "binomial"
, data = dream_table_subset)
mn = glm(has_female ~
log_contributors
+ log_stars
+ has_coc
+ has_contrib
+ sentiment
+ header_count
+ normalized_readability
# , weights = total_num_contributors
, family = "binomial"
, data = dream_table_subset)
summary(mn)
anova(mn)
