{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import os\n",
    "from os import listdir\n",
    "from os.path import isfile, join\n",
    "\n",
    "dat_path = os.path.relpath(\"commits\")\n",
    "\n",
    "# list through all the csv files in the folder\n",
    "commit_files = [f for f in listdir(dat_path) if isfile(join(dat_path, f))]\n",
    "\n",
    "table = []\n",
    "\n",
    "for commit_file in commit_files:\n",
    "    dat = pd.read_csv(os.path.join(dat_path, commit_file))\n",
    "\n",
    "    # number of rows\n",
    "    total_commit = dat.shape[0]\n",
    "\n",
    "    # count total contributors we have\n",
    "    authors = dat[\"author_name\"].unique()\n",
    "    total_authors = authors.size\n",
    "\n",
    "    female_count = 0\n",
    "    male_count = 0\n",
    "\n",
    "    for author in authors:\n",
    "        target_person = dat[dat[\"author_name\"] == author]\n",
    "\n",
    "        # column of the gender of author\n",
    "        gender = target_person[\"gender\"].iloc[0]\n",
    "        if gender > 0:\n",
    "            female_count += 1\n",
    "        elif gender < 0:\n",
    "            male_count += 1\n",
    "\n",
    "    female_ratio = female_count/total_authors\n",
    "    male_ratio = male_count/total_authors\n",
    "    \n",
    "    slug = commit_file[:-4].replace('_____', '/')\n",
    "    \n",
    "    dict = {\"slug\": slug, \"total commits\": total_commit, \"total contributors\":total_authors, \"num female\": female_count, \"num male\": male_count}\n",
    "    table.append(dict)\n",
    "    \n",
    "table_df = pd.DataFrame(table)\n",
    "table_csv = table_df.to_csv(\"table\", index = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "stars_df = pd.read_csv(\"stats/stars.csv\")\n",
    "\n",
    "table_combined = table_df.set_index('slug').join(stars_df.set_index('slug'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from nltk.sentiment.vader import SentimentIntensityAnalyzer\n",
    "\n",
    "dat_path_readme = os.path.relpath(\"README\")\n",
    "\n",
    "# list through all the csv files in the folder\n",
    "readme_files = [f for f in listdir(dat_path_readme) if isfile(join(dat_path_readme, f))]\n",
    "\n",
    "list_of_dict = []\n",
    "for readme_file in readme_files:\n",
    "    path = os.path.join(dat_path_readme, readme_file)\n",
    "    dat_readme = open(path, encoding='utf-8', errors='ignore')\n",
    "    lines = dat_readme.readlines()\n",
    "\n",
    "    code_occurrences = []\n",
    "\n",
    "    i = 0\n",
    "    while i < len(lines):\n",
    "        if \"```\" in lines[i]:\n",
    "            code_occurrences.append(i)\n",
    "        i += 1\n",
    "\n",
    "    j = len(code_occurrences)-2\n",
    "    while j >= 0:\n",
    "        start = code_occurrences[j]\n",
    "        end = code_occurrences[j+1]\n",
    "        del lines[start:end]\n",
    "        j -= 2\n",
    "\n",
    "    sid = SentimentIntensityAnalyzer()\n",
    "\n",
    "    new_text = \"\".join(lines)\n",
    "    ss = sid.polarity_scores(new_text)\n",
    "    \n",
    "    slug = readme_file[:-10].replace('_____', '/')\n",
    "\n",
    "    dict = {\"slug\": slug, \"compound\": ss[\"compound\"]}\n",
    "    list_of_dict.append(dict)\n",
    "    \n",
    "# print(list_of_dict)\n",
    "    \n",
    "sentiment_df = pd.DataFrame(list_of_dict)\n",
    "sentiment_csv = sentiment_df.to_csv(\"sentiments\", index = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "f = \"README/node-link/minecord\"\n",
    "\n",
    "for readme_file in readme_files:\n",
    "    path = os.path.join(dat_path_readme, readme_file)\n",
    "    dat_readme = open(path, encoding='utf-8', errors='ignore')\n",
    "    lines = dat_readme.readlines()\n",
    "\n",
    "for line in lines:\n",
    "    dat_readme = open(path, encoding='utf-8', errors='ignore')\n",
    "    lines = dat_readme.readlines()\n",
    "    \n",
    "    ss_line = sid.polarity_scores(new_text)\n",
    "    print(line)\n",
    "    for k in sorted(ss_line):\n",
    "        print('{0}: {1}, '.format(k, ss_line[k]), end='')"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
